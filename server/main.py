# server/main.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List
import os
import asyncio

# ======================
# FastAPI (API + Static)
# ======================

app = FastAPI(title="SBALO Stylist API")

# ---- Mock data for MVP ----
CATALOG = [
    {"id": "sh-001", "title": "–ë–æ—Ç–∏–ª—å–æ–Ω—ã SBL Noir",  "price": 12990, "img": "/img/noir.jpg",  "tags": ["–æ—Ñ–∏—Å", "–æ—Å–µ–Ω—å"]},
    {"id": "sh-002", "title": "–°–∞–ø–æ–≥–∏ SBL Storm",     "price": 16990, "img": "/img/storm.jpg", "tags": ["–¥–æ–∂–¥—å", "casual"]},
    {"id": "sh-003", "title": "–õ–æ—Ñ–µ—Ä—ã SBL Grace",     "price": 11990, "img": "/img/grace.jpg", "tags": ["–æ—Ñ–∏—Å", "casual"]},
]

QUIZ = [
    {"id": "q1", "q": "–ö–∞–∫—É—é –æ–±—É–≤—å –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥ –ø—Ä—è–º—ã–µ –¥–∂–∏–Ω—Å—ã?", "a": ["–ë–∞–ª–µ—Ç–∫–∏", "–ë–æ—Ç–∏–ª—å–æ–Ω—ã –Ω–∞ –∫–∞–±–ª—É–∫–µ", "–£–≥–≥–∏"], "correct": 1, "tip": "–ö–∞–±–ª—É–∫ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç —Å–∏–ª—É—ç—Ç."},
    {"id": "q2", "q": "–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑–µ?",          "a": ["2-3", "5-6", "1"],                    "correct": 0, "tip": "–î–µ—Ä–∂–∏–º –æ–±—Ä–∞–∑ —á–∏—Å—Ç—ã–º: 2‚Äì3 —Ü–≤–µ—Ç–∞."},
]

class MissionResult(BaseModel):
    user_id: int
    look_items: List[str]
    city: str

@app.get("/api/catalog")
def catalog():
    return CATALOG

@app.get("/api/quiz")
def quiz():
    return QUIZ

@app.post("/api/mission/submit")
def submit(res: MissionResult):
    # TODO: –∑–∞–ø–∏—Å—å –≤ –ë–î, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞ –ø–æ –≥–æ—Ä–æ–¥—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    return {"ok": True, "coupon": "SBL5"}

@app.get("/healthz")
def health():
    return {"ok": True}

# –°—Ç–∞—Ç–∏–∫–∞ (SPA): —Å–±–æ—Ä–∫–∞ Vite –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ server/public
# html=True ‚Äî —á—Ç–æ–±—ã /app –∏ –ª—é–±—ã–µ SPA-–º–∞—Ä—à—Ä—É—Ç—ã –æ—Ç–¥–∞–≤–∞–ª–∏ index.html
app.mount("/", StaticFiles(directory="server/public", html=True), name="static")


# ======================
# Telegram Bot (inline WebApp button), runs in background
# ======================

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

def _webapp_url() -> str:
    # –§–æ–ª–ª–±–µ–∫ –Ω–∞ /app, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞
    base = WEBAPP_URL or "/app"
    # –î–æ–±–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ—Ä–æ–¥–∞
    return f"{base}?city=spb"

async def _run_bot(bot, dp):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("[BOT] webhook deleted, starting polling‚Ä¶", flush=True)
        await dp.start_polling(bot)
    except Exception as e:
        # –ù–µ —Ä–æ–Ω—è–µ–º API ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"[BOT ERROR] {e}", flush=True)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–µ–Ω
if BOT_TOKEN:
    try:
        from aiogram import Bot, Dispatcher, types, F
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
        from aiogram.utils.token import validate_token

        validate_token(BOT_TOKEN)  # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –µ—â—ë –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bot
        bot = Bot(BOT_TOKEN)
        dp = Dispatcher()

        @dp.message(F.text == "/start")
        async def start_cmd(m: types.Message):
            url = _webapp_url()
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É", web_app=WebAppInfo(url=url))
            ]])
            await m.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â—É—é –∏–≥—Ä—É SBALO: —É—Ä–æ–∫–∏ + –ø—Ä–∞–∫—Ç–∏–∫–∞ + –∫—É–ø–æ–Ω—ã. –ü–æ–µ—Ö–∞–ª–∏! üëá\n\n"
                f"–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏–¥–Ω–∞, –æ—Ç–∫—Ä–æ–π —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é: {url}",
                reply_markup=kb
            )

        @dp.message(F.web_app_data)
        async def on_webapp_data(m: types.Message):
            import json
            try:
                payload = json.loads(m.web_app_data.data)
                coupon = payload.get("coupon", "SBL5")
            except Exception:
                coupon = "SBL5"
            await m.answer(
                f"–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: **{coupon}** ‚àí5%. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞—Å—Å–µ üñ§",
                parse_mode="Markdown"
            )

        @app.on_event("startup")
        async def _start_bot_task():
            print("[BOT] starting background task", flush=True)
            asyncio.create_task(_run_bot(bot, dp))

    except Exception as e:
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π/–æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –Ω–æ API –∂–∏–≤—ë—Ç
        print(f"[BOT DISABLED] {e}", flush=True)
else:
    print("[BOT DISABLED] BOT_TOKEN is empty", flush=True)
