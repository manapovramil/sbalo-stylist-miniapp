from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List
import os, asyncio

# === API ===
app = FastAPI(title="SBALO Stylist API")

CATALOG = [
    {"id":"sh-001","title":"–ë–æ—Ç–∏–ª—å–æ–Ω—ã SBL Noir","price":12990,"img":"/img/noir.jpg","tags":["–æ—Ñ–∏—Å","–æ—Å–µ–Ω—å"]},
    {"id":"sh-002","title":"–°–∞–ø–æ–≥–∏ SBL Storm","price":16990,"img":"/img/storm.jpg","tags":["–¥–æ–∂–¥—å","casual"]},
    {"id":"sh-003","title":"–õ–æ—Ñ–µ—Ä—ã SBL Grace","price":11990,"img":"/img/grace.jpg","tags":["–æ—Ñ–∏—Å","casual"]},
]
QUIZ = [
    {"id":"q1","q":"–ö–∞–∫—É—é –æ–±—É–≤—å –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥ –ø—Ä—è–º—ã–µ –¥–∂–∏–Ω—Å—ã?","a":["–ë–∞–ª–µ—Ç–∫–∏","–ë–æ—Ç–∏–ª—å–æ–Ω—ã –Ω–∞ –∫–∞–±–ª—É–∫–µ","–£–≥–≥–∏"],"correct":1,"tip":"–ö–∞–±–ª—É–∫ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç —Å–∏–ª—É—ç—Ç."},
    {"id":"q2","q":"–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑–µ?","a":["2-3","5-6","1"],"correct":0,"tip":"–î–µ—Ä–∂–∏–º –æ–±—Ä–∞–∑ —á–∏—Å—Ç—ã–º: 2-3 —Ü–≤–µ—Ç–∞."},
]

class MissionResult(BaseModel):
    user_id: int
    look_items: List[str]
    city: str

@app.get("/api/catalog")
def catalog():
    return CATALOG

@app.get("/api/quiz")
def quiz():
    return QUIZ

@app.post("/api/mission/submit")
def submit(res: MissionResult):
    return {"ok": True, "coupon": "SBL5"}

@app.get("/healthz")
def health():
    return {"ok": True}

# –°—Ç–∞—Ç–∏–∫–∞: —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç
app.mount("/", StaticFiles(directory="server/public", html=True), name="static")

# === Telegram Bot –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

if BOT_TOKEN:
    from aiogram import Bot, Dispatcher, types, F
    from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton

    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()

    @dp.message(F.text == "/start")
    async def start(m: types.Message):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        url = (WEBAPP_URL or "/app") + "?city=spb"
        kb.add(KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É", web_app=WebAppInfo(url=url)))
        await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â—É—é –∏–≥—Ä—É SBALO: —É—Ä–æ–∫–∏ + –ø—Ä–∞–∫—Ç–∏–∫–∞ + –∫—É–ø–æ–Ω—ã. –ü–æ–µ—Ö–∞–ª–∏! üëá", reply_markup=kb)

    @dp.message(F.web_app_data)
    async def on_webapp_data(m: types.Message):
        import json
        try:
            payload = json.loads(m.web_app_data.data)
            coupon = payload.get("coupon", "SBL5")
        except Exception:
            coupon = "SBL5"
        await m.answer(f"–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: **{coupon}** ‚àí5%. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞—Å—Å–µ üñ§", parse_mode="Markdown")

    @app.on_event("startup")
    async def _start_bot():
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ long polling –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç uvicorn
        asyncio.create_task(_run_bot())

    async def _run_bot():
        # –°–±—Ä–æ—Å–∏–º –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏ —Å—Ç–∞—Ä—Ç–∞–Ω—ë–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
